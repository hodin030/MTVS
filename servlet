servlet
패키지 생성 - 톰캣 설정 바꾸기 (VM options: -Dfile.encoding=UTF-8)(Deployment-Application context: /)
클라이언트 → 서버 요청들어오면 응답 필요
톰캣같은 상용화된 서버 사용 → 커스터마이징
요청에 대해 무엇을 호출할지 경우의 수를 만듦
요청이 들어오면 어떻게 응답할 지 이러한 인터페이스를 servlet이라고 함.
요청방식
      두겟이랑 두포스트랑 뭔 차이냐???
doGet() : Get방식에서 호출되는 메소드. 데이터가 URL에 포함된다. 
doPost() : Post방식에서 호출되는 메서드. 데이터가 HTML header에 포함된다.
request
getparameter로 값을 꺼냄
서블릿 기능 3가지
1. 요청 받기 - HttpMethod GET/POST 요청에 따라서 parameter로 전달받은 데이터를 꺼낸다.
2. 비지니스 로직 처리 = DB 접속과 CRUD에 대한 로직 + 도메인 로직
3. 응답하기 - 문자열로 동적인 웹(HTML 태그) 페이지를 만들고 스트림을 이용해 내보낸다.
* 동적 페이지: 사용자마다 보는 각각의 다른 페이지
특정한 에러상태 코드일 때 표시할 페이지를 우리가 만들 수 있음
이후에 스프링에서 방법을 다시 배울 예정 지금은 흐름을 이해
**위임/재요청 방식 → 반드시 이해 필요
파싱: 필요한 정보를 끄집어내는것
위임(forward 방식): 다른 서블릿에 위임(요청을 잘하는 1번 서블릿이 응답을 잘하는 3번 서블릿에 위임)
요청 경로: request A → 1번 서블릿 → 2번 데이터베이스 → 1번 서블릿(응답) → 3번 서블릿(위임) 
→ 클라이언트(응답)
 정보를 공유하려면 생성자/메소드 방법 사용해야하는데 서블릿은 그게 불가능
따라서 1번  서블릿이 3번 서블릿에 정보 공유하려면 request 공유를 통해 정보 공유 → atrribute
(set/getAttribute) 사용
RequestDispatcher: 방향정보를 가지고 있는 객체. forward 메소드를 갖고있어서 req,resp를 넣으면 값을 호출함.
서버 측에 데이터를 넣을 때는  forward 방식 이용X (새로고침 할때마다 데이터가 계속 입력되기 때문)
→ 데이터 조회 시 주로 사용(ex.로그인)
재요청(redirect) 방식:
요청 경로: request A → 1번 서블릿 → 2번 데이터베이스 → 1번 서블릿(응답) → 클라이언트(응답 및 재요청) → request B → 3번 서블릿 → 클라이언트(응답)
다시 요청할 때는 request B만 시행됨. 데이터 저장 시 주로 사용? (ex. 회원가입)
//로그인을 get방식을 쓰면 url에 다 보여서 예외적으로 조회방식으로 진행
**값을 유지하기 위한 매커니즘
/response ? key = value (요청할때 값(경로)까지 입력 → 3번에 재요청시 parameter방식으로 값을 꺼내 쓸 수 있음)
클라이언트에 쿠키라는 객체를 저장 및 전달
세션: 사용자마다 map이 하나씩 부여됨. 세션 id로 내 공간을 찾아감. 가장 안전한 방식(서버에서 관리되기 때문)
(4.) 컨텍스트( > 세션) = 톰캣 자체를 의미 : 개별 사용자가 아닌 어플리케이션에 공간 부여. 예외적 방법
사용자가 url을 조작해서 요청하면 무조건 get 방법 사용해야함
시스템에 변화가 생기는 요청 -> redirect 방식  ex) 로그인, 회원가입, 글쓰기..
시스템에 변화가 생기지 않은 단순조회 -> forward방식  ex) 리스트 보기, 검색...
